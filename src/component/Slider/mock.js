export const slides = [
  {
    "title": "Bundlers",
    "description": ["pr2020"],
  },
  {
    "title": "Для чего нужны сборщики проектов",
    "description": [
      "Ранее для сборки использовались task runners / build system (таск раннеры или системы сборки, например: grunt/gulp). Их основная цель - выполнение описанных задач (транспайлинг кода, минификация и т.д.).",
      "Сборщики нужны для сборки проекта (очень полезен на больших проектах). Это инструмент, основная цель которого состоит в том, чтобы собрать все ваши .js файлы в любое нужное вам количество пакетов (bundles), а также убедиться, что в собранном пакете есть все .js файлы вашего проекта в правильном порядке.",
      "Webpack vs Parcel vs Rollup (исходя из статей и сравнений на просторах интернета):"
    ],
    "list": [
      "Webpack - определенно самый гибкий и при должной настройке самый шустрый бандлер, из представленных. Больше остальных подходит для коммерческой разработки и работы над крупными проектами.",
      "Parcel - самый простой из бандлеров, который можно брать и использовать, благодаря минимальному входному порогу.",
      "Rollup - отлично подходит для авторов библиотек. Имеет самый агрессивный tree shaking, что приводит к самым маленьким бандлам."
    ]
  },
  {
    "title": "Webpack",
    "description": [
      "Webpack позволяет избавиться от bower и gulp/grunt в приложении, и заменить их одним инструментом. Вместо bower'а для установки и управления клиентскими зависимостями, можно использовать стандартный Node Package Manager (npm) для установки и управления всеми фронтэнд-зависимостями. Вебпак также может выполнять большинство задач grunt/gulp'а.",
      "Начиная с точки входа, webpack рекурсивно создает граф зависимостей, который включает в себя каждый модуль (js, css, img, font), в котором нуждается приложение, а затем объединяет все эти модули в небольшое количество бандлов - часто только один - для загрузки браузером.",
      "Сейчас webpack является самым популярным бандлером. С 4-ой версией пришло много нового: нулевая конфигурация, разумные значения по умолчанию, улучшеная производительность, готовые инструменты оптимизации."
    ],
  },
  {
    "title": "Основные поля конфига",
    "list": [
      "entry - точка входа, путь до главного файла, вход в наше приложение. Можем дать явное название приложению, то entry может быть объектом, в котором ключ - имя, а значение - путь для входа в приложение. Можем собирать несколько приложений в единый бандл, для этого зачение задаем как массив",
      "output - указываем куда положить результат сборки и как его назвать. Если приложений много, то нужно дать возможность вебпаку самому проставлять имя и нельзя забывать про кэширование: filename: '[name].[contenthash].js'. contenthash - хэш, который строится индивидуально для каждого бандла/чанка (нововведение 4 вебпака, ранее можно было использовать [hash], но он единый для всего билда и, при исменении одного файла, хэш менялся у всех, что приводило в повторной загрузке нетронутых файлов). При кэширование нужно помнить в проде.",
      "loaders - вебпак самостоятельно «понимает» только JavaScript. Лоадеры в вебпаке преобразовывают файлы в модули, которые потом добавляются в граф зависимостей. Грубо говоря, лоадеры нужны вебпаку для двух вещей: определяют, какой файл каким лоадером обрабатывается (свойство test) и преобразуют эти файлы таким образом, чтобы они могли быть добавлены в граф зависимостей (и, в конечном счете, в сборку) (свойство use). В use можно указать несколько лоадеров, применяться они будут справа налево",
      "plugins - в то время как лоадеры выполняют только преобразования, основанные на типе файла, плагины чаще используются для выполнения действий и пользовательских преобразований на этапе компиляции или частей сборки. У вебпака очень мощная и гибко настраиваемая система плагинов. Чтобы использовать плагин, нужно просто импортировать его с помощью require() и добавить в массив плагинов. Большинство плагинов настраивается через опции. Поскольку можно использовать плагин несколько раз в рамках одного конфига, потребуется создать несколько экземпляров плагина - new [НазваниеПлагина]().",
      "mode - нововведение 4 вебпака. Может принимать значения production (default), development, none. Вебпак за нас выставляет настройки, при которых дев бандлы собираются как можно быстрее, а продакшен бандл был как можно меньше. ",
    ]
  },
  {
    "title": "Пакеты для установки",
    "description": [
      "Начинаем с инициализации package.json. Далее можем устанавливать необходимые пакеты.",
    ],
    "list": [
      "webpack — сборка модулей.",
      "webpack-cli — работа с Webpack из командной строки.",
      "webpack-dev-server — настройка сервера разработки.",
    ]
  },
  {
    "description": [
      "Установка React",
    ],
    "list": [
      "react — библиотека React.",
      "react-dom — библиотека, которая поможет нам использовать возможности React в браузере.",
    ]
  },
  {
    "description": [
      "Установка Babel.",
      "Это транспилятор, который, в основном, используется для преобразования конструкций, принятых в свежих версиях стандарта ECMAScript, в вид, понятный как современным, так и не самым новым браузерам и другим средам, в которых может выполняться JavaScript. Babel, кроме того, умеет преобразовывать в JavaScript и JSX-код, используя @babel/preset-react.",
    ],
    "list": [
      "@babel/core — транспиляция JSX в JS.",
      "@babel/preset-env — создание кода, подходящего для старых браузеров.",
      "@babel/preset-react — настройка транспилятора для работы с React-кодом",
      "babel-loader — настройка Webpack для работы с Babel.",
    ]
  },
  {
    "description": [
      "Стили",
    ],
    "list": [
      "css-loader — настройка Webpack для работы с CSS.",
      "style-loader — загрузка всего используемого CSS-кода внутрь тега документа style.",
      "sass-loader — настройка Webpack для работы с SCSS/SASS.",
      "node-sass - позволяет скомпилировать файлы .scss в css.",
    ]
  },
  {
    "description": [
      "Файлы",
    ],
    "list": [
      "file-loader — настройка Webpack для работы с картинками/шрифтами.",
    ]
  },
  {
    "description": [
      "PostCSS",
    ],
    "list": [
      "postcss-loader - инструмент для преобразования стилей с помощью плагинов JS.",
      "postcss-preset-env - позволяет преобразовать современный CSS в то, что большинство браузеров может понять.",
    ]
  },
  {
    "description": [
      "Плагины",
    ],
    "list": [
      "html-webpack-plugin - генерирует html-файл по шаблону при сборке.",
      "mini-css-extract-plugin - необходима чтобы отделить js код от css кода.",
      "clean-webpack-plugin - позволяет удалить / очистить папку(и) сборки.",
    ]
  },
  {
    "title": "Источники",
    "listLinks": [
      "https://webpack.js.org/",
      "https://habr.com/",
      "https://medium.com/",
      "https://github.com/",
      "http://dev-city.me/",
    ]
  },
];
