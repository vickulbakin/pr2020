export const slides = [
  {
    "title": "Bundlers",
    "description": ["pr2020"],
  },
  {
    "title": "Для чего нужны сборщики проектов",
    "description": [
      "Ранее для сборки использовались task runners / build system (таск раннеры или системы сборки, например: grunt/gulp). Их основная цель - выполнение описанных задач (транспайлинг кода, минификация и т.д.).",
      "Сборщики нужны для сборки проекта (очень полезен на больших проектах). Это инструмент, основная цель которого состоит в том, чтобы собрать все ваши .js файлы в любое нужное вам количество пакетов (bundles), а также убедиться, что в собранном пакете есть все .js файлы вашего проекта в правильном порядке.",
      "Webpack vs Parcel vs Rollup (исходя из статей и сравнений на просторах интернета):"
    ],
    "list": [
      "Webpack - определенно самый гибкий и при должной настройке самый шустрый бандлер, из представленных. Больше остальных подходит для коммерческой разработки и работы над крупными проектами.",
      "Parcel - самый простой из бандлеров, который можно брать и использовать, благодаря минимальному входному порогу.",
      "Rollup - отлично подходит для авторов библиотек. Имеет самый агрессивный tree shaking, что приводит к самым маленьким бандлам."
    ]
  },
  {
    "title": "Webpack",
    "description": [
      "Изначально использовался, чтобы собирать js логику в единый или несколько бандлов, но его так же можно настроить на обработку других ассетов. Webpack создает граф всех зависимостей приложения."
    ],
  },
  {
    "title": "Особенности webpack",
    "description": ["Базовые функции:"],
    "list": [
      "Загрузчики (Loaders)",
      "Плагины (Plugins)",
      "Использование разных конфигураций для разных окружений",
      "Отложенная загрузка модулей",
      "Удаление с помощью tree shaking забытого кода",
      "Горячая замена модуля, которая позволяет обновлять код во время выполнения без необходимости полного обновления",
      "Кэширование путем подстановки имен файлов хэшами",
    ]
  },
  {
    "title": "Основные поля конфига",
    "list": [
      "entry - точка входа, путь до главного файла, вход в наше приложение. Можем дать явное название приложению, то entry может быть объектом, в котором ключ - имя, а значение - путь для входа в приложение. Можем собирать несколько приложений в единый бандл, для этого зачение задаем как массив",
      "output - указываем куда положить результат сборки и как его назвать. Если приложений много, то нужно дать возможность вебпаку самому проставлять имя и нельзя забывать про кэширование: filename: '[name].[contenthash].js'. contenthash - хэш, который строится индивидуально для каждого бандла/чанка (нововведение 4 вебпака, ранее можно было использовать [hash], но он единый для всего билда и, при исменении одного файла, хэш менялся у всех, что приводило в повторной загрузке нетронутых файлов). При кэширование нужно помнить в проде.",
      "loaders - вебпак самостоятельно «понимает» только JavaScript. Лоадеры в вебпаке преобразовывают файлы в модули, которые потом добавляются в граф зависимостей. Грубо говоря, лоадеры нужны вебпаку для двух вещей: определяют, какой файл каким лоадером обрабатывается (свойство test) и преобразуют эти файлы таким образом, чтобы они могли быть добавлены в граф зависимостей (и, в конечном счете, в сборку) (свойство use).",
      "plugins",
      "mode",
    ]
  },
];